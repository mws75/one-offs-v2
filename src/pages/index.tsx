import { SignIn } from "@clerk/nextjs";
import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import { LoadingPage } from "~/components/loadingspinner";

import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import PostObject from "~/components/postobject";
import { PageLayout } from "~/components/layouts";
import Link from "next/link";
import { useEffect, useState } from "react";

import { useRouter } from "next/router";
import { RecentlyViewedObject } from "~/components/recentlyViewedObject";
import background_img from "../../public/background_img.jpeg";
import default_profile_pic from "../../public/default_profile_pic.png";

// TODO

const PostFeed = () => {
  const { user } = useUser();
  if (!user) return null;

  const userId = user.id;
  const profile_image_url = user.profileImageUrl;

  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();
  const user_profile = api.profile.getById.useQuery({ id: userId });
  const { mutate } = api.profile.insertNewUser.useMutation({});
  const [dataFeteched, setDataFetched] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      if (user_profile.data === undefined) {
        try {
          await mutate({ profile_image_url });
          setDataFetched(true);
        } catch (error) {
          console.log(error);
          alert("something went wrong");
        }
      } else {
        console.log("user has already been added");
      }
    };
    if (!dataFeteched) {
      fetchData();
    }
  }, []);

  if (postsLoading) {
    return <LoadingPage />;
  }
  if (!data) {
    return <p>No posts found</p>;
  }

  return (
    <div className="flex flex-wrap">
      {data.map((post) => (
        <div key={post.id} className="mb-4 p-4">
          <PostObject {...post} key={post.id} />
        </div>
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  const { isLoaded: userLoaded, isSignedIn, user } = useUser();

  if (!userLoaded) {
    return <LoadingPage />;
  }

  return (
    <>
      <div className={`bg-gradient-to-r from-purple-300 to-pink-200`}>
        <Head>
          <title>Create T3 App</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <PageLayout>
          <div className="flex ">
            {!isSignedIn && (
              <div className="justify-center rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700">
                <SignInButton />
              </div>
            )}
          </div>
          {isSignedIn && (
            <div>
              <p>{`You are signed in as : ${user.emailAddresses}`}</p>
              <div className="flex flex-wrap">
                <RecentlyViewedObject />
                <PostFeed />
              </div>

              <div>
                <Link href={`/newPost`}>
                  <button className="mx-5 rounded bg-blue-500 p-4 px-4 py-2 font-bold text-white hover:bg-blue-700">
                    Createt New Post
                  </button>
                </Link>
              </div>
              <div className="m-5 w-32 rounded bg-red-500 px-4 py-2 font-bold text-white hover:bg-red-700">
                <SignOutButton />
              </div>
            </div>
          )}
        </PageLayout>
      </div>
    </>
  );
};

export default Home;
